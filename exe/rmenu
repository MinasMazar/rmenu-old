require "rmenu"
require "thor"
require "pry"
require "mkfifo"

module RMenu
  class CLI < Thor

    DEFAULT_CONFIG = {
      :config_file => File.expand_path(".rmenu.yml", "~"),
      :items_file => File.expand_path(".rmenu_items.yml", "~"),
      :waker_io => File.expand_path(".rmenu_waker", "~")
    }

    DEFAULT_DMENU_PARAMS = {
      :position            => :top,
      :case_insensitive    => false,
      :lines               => 1,
      :font                => nil,
      :background          => nil,
      :foreground          => nil,
      :selected_background => nil,
      :selected_foreground => nil,
      :prompt              => nil
    }

    class_option :config, :default => DEFAULT_CONFIG[:config_file]

    attr_accessor :config

    no_commands do

      def create_rmenu_waker_if_not_present
        unless File.exists? config[:waker_io]
          File.mkfifo config[:waker_io]
        end
      end

      def create_rmenu_config_if_not_present
        self.config[:config_file] = options["config"]
        unless File.exists? config[:config_file]
          dmenu_default_config = DEFAULT_CONFIG.merge DEFAULT_DMENU_PARAMS
          File.write config[:config_file], YAML.dump(dmenu_default_config)
        end
      end

      def create_items_file_if_not_present
        unless File.exists? config[:items_file]
          items_file = File.new config[:items_file], "w"
          items_file.write YAML.dump([])
          items_file.close
        end
      end

      def setup_config
        self.config = DEFAULT_CONFIG
        create_rmenu_config_if_not_present
        create_rmenu_waker_if_not_present
        create_items_file_if_not_present
      end

      def get_instance
        rmenu_instance = RMenu::Profiles::Main.new config
      end

    end

    desc "start", "Start rmenu instance in background"
    option :with_pry, type: :boolean, default: false, desc: "Start with an associated PRY session (must be launched from terminal!)"
    def start
      setup_config
      rmenu_instance = get_instance
      rmenu_instance.start do
        if options[:with_pry]
          rmenu_instance.pry
        else
          rmenu_instance.dmenu_thread.join
        end
      end
    end

  end
end

RMenu::CLI.start ARGV
